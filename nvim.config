"
"-------------------------
"  Plugin
" -------------------------
set shell=/bin/sh
set nocompatible
filetype off

call plug#begin()
Plug 'mhartington/oceanic-next'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'mg979/vim-visual-multi', {'branch': 'master'}
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'preservim/tagbar'
Plug 'pboettch/vim-cmake-syntax'
Plug 'godlygeek/tabular'
Plug 'sheerun/vim-polyglot'
Plug 'Yggdroot/indentLine'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'voldikss/vim-floaterm'

" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }


call plug#end()
filetype plugin indent on


" ------------------------------
" Base
" ------------------------------

let g:oceanic_next_terminal_bold = 1
let g:oceanic_next_terminal_italic = 1
colorscheme OceanicNext
" colorscheme dracula
set background=dark

set hidden
set number
syntax enable
set cursorline

set nowrap
set nobackup
set nowritebackup

set encoding=UTF-8
set langmenu=zh_CN.UTF-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8
set t_Co=256

set wildmenu
set wildmode=longest:list,full

" tab
set autoindent
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

set undofile
set history=1000
set autoread

set splitbelow
set splitright

" search
set incsearch
set ignorecase
set hlsearch
set smartcase
set noshowmatch

set updatetime=300
set shortmess+=c
set signcolumn=yes


" " ------------------------------
" " Window
" " ------------------------------
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l


" ------------------------------
" Leader Setting
" ------------------------------
let mapleader=" "

" .vimrc
nnoremap <silent> <Leader>ve :e ~/.config/nvim/init.vim<CR>
nnoremap <silent> <Leader>vE :vsplit ~/.config/nvim/init.vim<CR>
nnoremap <silent> <Leader>vv :source ~/.config/nvim/init.vim<CR>
nnoremap <silent> <Leader>vh :nohl<CR>
nnoremap <silent> <Leader>vn :set number!<CR>
nnoremap <silent> <Leader>s  :wa<CR>
" nnoremap <silent> <Leader>vb :call BackgroundToggle()<CR>

" imap <tab> <C-x><C-o>

" buffer
nnoremap <silent> gB :bprevious<CR>
nnoremap <silent> gb :bnext<CR>
nnoremap <silent> <Leader>w :bdelete<CR>


" ------------------------------
" NERDTree
" ------------------------------

" let NERDTreeShowHidden=1
" let NERDTreeWinSize=max([25, winwidth(0) / 5])

let NERDTreeWinPos = 'left'
let NERDTreeWinSize=40
let NERDTreeShowLineNumbers=1
let NERDTreeMinimalMenu=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrowExpandable="▸"
let NERDTreeDirArrowCollapsible="▾"
nnoremap <silent> <F2> :NERDTreeToggleVCS<CR>

" autocmd VimEnter * nested :NERDTreeVCS

" ------------------------------
" Tagbar
" ------------------------------
" let g:tagbar_show_data_type = 1
" let g:tagbar_autopreview = 1
" let g:tagbar_previewwin_pos = "aboveleft"
" let g:tagbar_show_tag_linenumbers = 1

nnoremap <silent> <F3> :TagbarToggle<CR>
let g:tagbar_compact=1
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 1
let g:tagbar_show_tag_count = 1
let g:tagbar_expand = 1
let g:tagbar_iconchars = ['▸', '▾']

" autocmd VimEnter * nested :TagbarOpen


" ------------------------------
" Leader F
" ------------------------------

let g:Lf_WildIgnore = {
      \ 'dir': ['node_modules', '.git', '.svn'],
      \ 'file': []
      \}
let g:Lf_PopupColorscheme = 'powerline'
let g:Lf_WindowPosition = 'popup'
let g:Lf_ReverseOrder = 1
let g:Lf_PopupShowStatusline = 0
let g:Lf_ShowDevIcons = 0
let g:Lf_ShortcutF = "<leader>ff"
nnoremap <silent> <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
nnoremap <silent> <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
nnoremap <silent> <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
nnoremap <silent> <leader>fl :LeaderfLineAllCword<CR>


" ------------------------------
" Airline
" ------------------------------

set guifont=Powerline_Consolas:h14:cANSI
let laststatus = 2
let g:airline_theme="onedark"
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#fzf#enabled = 1

let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9


" ------------------------------
" Coc
" ------------------------------

" tab 触发补全，确认补全
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ?
      \ "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" <CR> 确认待选项
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

" 定义跳转
nmap <silent> gl <Plug>(coc-format)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gs <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-rename)
nmap <silent> gi <Plug>(coc-references)
nmap <silent> gx <Plug>(coc-fix-current)

" 前后错误
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)

" 帮助文档
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <silent> <leader>ln <Plug>(coc-rename)



" ------------------------------
" vim-go
" ------------------------------

let g:go_def_mode='gopls'    
let g:go_info_mode='gopls'


" ------------------------------
" floaterm
" ------------------------------

hi Floaterm guibg=blue
hi FloatermBorder guibg=orange guifg=cyan

let g:floaterm_keymap_toggle = '<Leader>to'
let g:floaterm_keymap_prev = '<Leader>tb'
let g:floaterm_keymap_next = '<Leader>tt'
let g:floaterm_keymap_kill = '<Leader>tc'
nnoremap <silent> <Leader>tr :FloatermNew ranger<CR>
nnoremap <silent> <Leader>tf :FloatermNew fzf<CR>
nnoremap <silent> <Leader>tn :FloatermNew node<CR>
nnoremap <silent> <Leader>tp :FloatermNew python3<CR>


" ------------------------------
" Tool Function
" ------------------------------

" " change background is dark or light
" function BackgroundToggle()
"   if (&background ==? "dark")
"     let &background = "light"
"   else
"     let &background = "dark"
"   endif
" endfunction


" ------------------------------
" Install other things
" ------------------------------

" pip3 install python-language-server
" npm i -g bash-language-server
" npm install -g dockerfile-language-server-nodejs
" pip3 install cmake-language-server
